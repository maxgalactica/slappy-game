//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/PlayerHandControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerHandControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerHandControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerHandControls"",
    ""maps"": [
        {
            ""name"": ""Hand"",
            ""id"": ""93e82241-5f72-4891-bf37-82cb5d22e978"",
            ""actions"": [
                {
                    ""name"": ""MoveLeftHand"",
                    ""type"": ""Value"",
                    ""id"": ""c2ee5adc-49c6-43ea-b159-889756e915af"",
                    ""expectedControlType"": ""Double"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MoveRightHand"",
                    ""type"": ""Value"",
                    ""id"": ""530d7d08-3d71-4000-9e2c-c94638f0917b"",
                    ""expectedControlType"": ""Double"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e17999aa-9cbf-4a04-bbd4-95eb1996f4ed"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic Gamepad"",
                    ""action"": ""MoveLeftHand"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e5533a6a-1c63-49e2-a13e-f2d352aad5b6"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Generic Gamepad"",
                    ""action"": ""MoveRightHand"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Generic Gamepad"",
            ""bindingGroup"": ""Generic Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Hand
        m_Hand = asset.FindActionMap("Hand", throwIfNotFound: true);
        m_Hand_MoveLeftHand = m_Hand.FindAction("MoveLeftHand", throwIfNotFound: true);
        m_Hand_MoveRightHand = m_Hand.FindAction("MoveRightHand", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Hand
    private readonly InputActionMap m_Hand;
    private IHandActions m_HandActionsCallbackInterface;
    private readonly InputAction m_Hand_MoveLeftHand;
    private readonly InputAction m_Hand_MoveRightHand;
    public struct HandActions
    {
        private @PlayerHandControls m_Wrapper;
        public HandActions(@PlayerHandControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveLeftHand => m_Wrapper.m_Hand_MoveLeftHand;
        public InputAction @MoveRightHand => m_Wrapper.m_Hand_MoveRightHand;
        public InputActionMap Get() { return m_Wrapper.m_Hand; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(HandActions set) { return set.Get(); }
        public void SetCallbacks(IHandActions instance)
        {
            if (m_Wrapper.m_HandActionsCallbackInterface != null)
            {
                @MoveLeftHand.started -= m_Wrapper.m_HandActionsCallbackInterface.OnMoveLeftHand;
                @MoveLeftHand.performed -= m_Wrapper.m_HandActionsCallbackInterface.OnMoveLeftHand;
                @MoveLeftHand.canceled -= m_Wrapper.m_HandActionsCallbackInterface.OnMoveLeftHand;
                @MoveRightHand.started -= m_Wrapper.m_HandActionsCallbackInterface.OnMoveRightHand;
                @MoveRightHand.performed -= m_Wrapper.m_HandActionsCallbackInterface.OnMoveRightHand;
                @MoveRightHand.canceled -= m_Wrapper.m_HandActionsCallbackInterface.OnMoveRightHand;
            }
            m_Wrapper.m_HandActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MoveLeftHand.started += instance.OnMoveLeftHand;
                @MoveLeftHand.performed += instance.OnMoveLeftHand;
                @MoveLeftHand.canceled += instance.OnMoveLeftHand;
                @MoveRightHand.started += instance.OnMoveRightHand;
                @MoveRightHand.performed += instance.OnMoveRightHand;
                @MoveRightHand.canceled += instance.OnMoveRightHand;
            }
        }
    }
    public HandActions @Hand => new HandActions(this);
    private int m_GenericGamepadSchemeIndex = -1;
    public InputControlScheme GenericGamepadScheme
    {
        get
        {
            if (m_GenericGamepadSchemeIndex == -1) m_GenericGamepadSchemeIndex = asset.FindControlSchemeIndex("Generic Gamepad");
            return asset.controlSchemes[m_GenericGamepadSchemeIndex];
        }
    }
    public interface IHandActions
    {
        void OnMoveLeftHand(InputAction.CallbackContext context);
        void OnMoveRightHand(InputAction.CallbackContext context);
    }
}
